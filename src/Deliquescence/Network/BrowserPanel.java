/* 
 * Copyright (c) 2014, Deliquescence <Deliquescence1@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * - Neither the name of the copyright holder nor the names of its contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package Deliquescence.Network;

import Deliquescence.Config;
import Deliquescence.Panel.GameManager;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import javax.swing.DefaultListModel;
import org.apache.commons.net.util.SubnetUtils;
import org.apache.commons.net.util.SubnetUtils.SubnetInfo;

/**
 *
 * @author Josh
 */
public class BrowserPanel extends javax.swing.JPanel {

    DefaultListModel listModel;
    GameManager gameManager;
    GameManager gameListPanel;

    String serverName;

    /**
     * Creates new form LANBrowserPanel
     */
    public BrowserPanel(GameManager gameManager, GameManager gameList) {
        this.gameManager = gameManager;
        this.gameListPanel = gameList;
        initComponents();

        //Socket testSocket = new Socket(addr, Config.getInt("NETWORK_PORT"));
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        ServerAddressFieldLabel = new javax.swing.JLabel();
        ServerAddressField = new javax.swing.JTextField();
        JoinServerButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        RefreshButton = new javax.swing.JButton();
        JoinLANButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listModel = new DefaultListModel();
        GameList = GameList = new javax.swing.JList(listModel);

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        jPanel2.setMaximumSize(new java.awt.Dimension(32767, 100));
        jPanel2.setMinimumSize(new java.awt.Dimension(203, 30));
        jPanel2.setPreferredSize(new java.awt.Dimension(400, 40));
        jPanel2.setLayout(new java.awt.BorderLayout());

        ServerAddressFieldLabel.setText("Server Address");
        ServerAddressFieldLabel.setMaximumSize(new java.awt.Dimension(203, 10));
        ServerAddressFieldLabel.setMinimumSize(new java.awt.Dimension(203, 10));
        ServerAddressFieldLabel.setPreferredSize(new java.awt.Dimension(203, 10));
        jPanel2.add(ServerAddressFieldLabel, java.awt.BorderLayout.PAGE_START);

        ServerAddressField.setMaximumSize(new java.awt.Dimension(2147483647, 20));
        ServerAddressField.setPreferredSize(new java.awt.Dimension(40, 10));
        jPanel2.add(ServerAddressField, java.awt.BorderLayout.CENTER);

        JoinServerButton.setText("Join");
        JoinServerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JoinServerButtonActionPerformed(evt);
            }
        });
        jPanel2.add(JoinServerButton, java.awt.BorderLayout.LINE_END);

        add(jPanel2);

        jPanel1.setMaximumSize(new java.awt.Dimension(32767, 100));
        jPanel1.setPreferredSize(new java.awt.Dimension(400, 20));
        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        RefreshButton.setText("Refresh");
        RefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshButtonActionPerformed(evt);
            }
        });
        jPanel1.add(RefreshButton);

        JoinLANButton.setText("Join Selected Game");
        JoinLANButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JoinLANButtonActionPerformed(evt);
            }
        });
        jPanel1.add(JoinLANButton);

        add(jPanel1);

        jLabel1.setText("LAN Games");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        add(jLabel1);

        GameList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(GameList);

        add(jScrollPane1);
    }// </editor-fold>//GEN-END:initComponents

    private void joinGame(String server) {
        try {
            InetAddress addr = InetAddress.getByName(server);

            gameListPanel.addTab(addr.getHostName(), new NetworkGameViewer(gameListPanel, addr));
        } catch (Exception e) {
            System.out.println(e);//todo
        }
    }

    private void RefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshButtonActionPerformed

        GameList.removeAll();
        String local;
        Integer[] LocalIP = new Integer[4];

        try {
            local = InetAddress.getLocalHost().getHostAddress();
            String[] IPstr = local.split("\\.");
            for (int i = 0; i < 4; i++) {
                LocalIP[i] = Integer.valueOf(IPstr[i]);
            }
        } catch (UnknownHostException ex) {
            local = "Network Error";
            return;
        }
        SubnetUtils utils = new SubnetUtils(local, "255.255.255.0");
        SubnetInfo info = utils.getInfo();

        try {
            for (String ip : info.getAllAddresses()) {
                InetAddress addr = InetAddress.getByName(ip);
                if (addr.isReachable(10)) {
                    Socket socket = new Socket(addr, Config.getInt("NETWORK_PORT"));
                }

//                ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream());
//                oos.writeObject("ping");
//
//                ObjectInputStream ois = new ObjectInputStream(socket.getInputStream());
//                String response = (String) ois.readObject();
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_RefreshButtonActionPerformed

    private void JoinLANButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JoinLANButtonActionPerformed
        serverName = (String) GameList.getSelectedValue();
        joinGame(serverName);
    }//GEN-LAST:event_JoinLANButtonActionPerformed

    private void JoinServerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JoinServerButtonActionPerformed
        joinGame(ServerAddressField.getText());
    }//GEN-LAST:event_JoinServerButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList GameList;
    private javax.swing.JButton JoinLANButton;
    private javax.swing.JButton JoinServerButton;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JTextField ServerAddressField;
    private javax.swing.JLabel ServerAddressFieldLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
